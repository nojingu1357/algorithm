#include <iostream>
#include <vector>
using namespace std;

int main() {

	int n, m;
	cin >> n >> m;
	vector<vector<int>> arr;
	
	int r,c,d;
	cin>>r>>c>>d;
	for (int i = 0; i < n; i++) {
		vector<int> inner;
		for (int j = 0; j < m; j++) {
			int l;
			cin >> l;
			inner.push_back(l);
		}
		arr.push_back(inner);
	}
	
	// 0 북, 1 동, 2 남, 3 서

	// 0 청소필요 상태, 1 벽, 2 청소함
	int cnt=0;
	while(1){
		
		//범위를 벗어나면 
		// if(r>n||c>m){cout<<cnt;break;}
		
		// 1. 청소하기
		if(arr[r][c]==0){
			arr[r][c]=2;
			// cout<<r<<", "<<c<<", "<<arr[r][c]<<", "<<d<<endl;
			cnt++;
		}

		// 2. 주변에 청소할 공간이 남아있는지 확인
		if(arr[r-1][c]==0||arr[r+1][c]==0||arr[r][c-1]==0||arr[r][c+1]==0){
			// 2-2. 있다면 90도 회전 ( 반시계 방향 ) 및 한칸 전진
			int a=1;
			while(a){
				if(d==0) d=3;
				else d--;
				if(d==0&&arr[r-1][c]==0) {a=0; r-=1;} 
				else if (d==1&&arr[r][c+1]==0) {a=0; c+=1;} 
				else if (d==2&&arr[r+1][c]==0) {a=0; r+=1;} 
				else if (d==3&&arr[r][c-1]==0) {a=0; c-=1;} 
				
			}
		} 
		else { // 2-1. 없다면 후진
			if (d==0) r+=1;
			else if (d==1) c-=1;
			else if (d==2) r-=1;
			else if (d==3) c+=1;
			// 2-1-1. 후진한 곳이 벽이라면 작동중지
			if (arr[r][c]==1) break;
		}
	}
	cout<<cnt;
	return 0;
}
